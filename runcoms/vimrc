set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
set rtp+=~/.fzf

call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
" plugin on GitHub repo
Plugin 'tpope/vim-fugitive'

Plugin 'mileszs/ack.vim'

" Plugin 'Valloric/YouCompleteMe'

" Plugin 'fisadev/vim-isort'

Plugin 'scrooloose/nerdtree'

Plugin 'Xuyuanp/nerdtree-git-plugin'

Plugin 'vim-syntastic/syntastic'
" syntactic conflicts with ale

" Plugin 'Lokaltog/powerline', {'rtp': 'powerline/bindings/vim/'}

Plugin 'ctrlpvim/ctrlp.vim'

Plugin 'jeffkreeftmeijer/vim-numbertoggle'

" Plugin 'w0rp/ale'

" Plugin 'JamshedVesuna/vim-markdown-preview'

" Plugin 'zefei/vim-wintabs'

Plugin 'fatih/vim-go'

Plugin 'majutsushi/tagbar'

Plugin 'christoomey/vim-tmux-navigator'

Plugin 'HerringtonDarkholme/yats.vim'

Plugin 'leafgarland/typescript-vim'

" All of your Plugins must be added before the following line
call vundle#end()
" required


" " w0rp ale
" let g:airline#extensions#ale#enabled = 0
"
" nmap <silent> <C-,> <Plug>(ale_previous_wrap)
" nmap <silent> <C-.> <Plug>(ale_next_wrap)
" let g:ale_completion_enabled = 1
"
" " Set this variable to 1 to fix files when you save them.
" let g:ale_fix_on_save = 1
"
" let g:ale_fixers = {
" \   '*': ['remove_trailing_lines', 'trim_whitespace'],
" \   'javascript': ['prettier', 'eslint'],
" \   'python': ['isort', 'autopep8'],
" \}
"
" let g:ale_sign_column_always = 1
"
" " Check Python files with flake8 and pylint.
" let g:ale_linters = {'python': ['flake8', 'pylint']}

" Nerd tree
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
map <F2> :NERDTreeToggle<CR>
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" majutsushi/tagbar
nmap <F9> :TagbarToggle<CR>

" "You complete me
" nnoremap ,gl :YcmCompleter GoToDeclaration<CR>
" nnoremap ,gf :YcmCompleter GoToDefinition<CR>
" nnoremap ,gg :YcmCompleter GoToDefinitionElseDeclaration<CR>
"
" let g:ycm_key_invoke_completion = '<C-Space>'
" let g:ycm_key_list_previous_completion = ['<S-TAB>', '<Up>']
" let g:ycm_key_list_select_completion = ['<TAB>', '<Down>']

filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

""  Vundle plugin install end.

" The Silver Searcher
if executable('rg')
  " Use rg over grep
  set grepprg=rg\ --vimgrep
  set grepformat=%f:%l:%c:%m,%f:%l:%m

  let g:ackprg = 'rg --vimgrep --no-heading --smart-case'

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'rg --files %s'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0

  let g:ctrlp_working_path_mode = 'ra'
  let g:ctrlp_switch_buffer = 'et'

endif

" bind T to grep word under cursor
nnoremap T :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

command -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!
nnoremap \ :Ag<SPACE>


" Syntastic
" set statusline+=%#warningmsg#
" set statusline+=%{SyntasticStatuslineFlag()}
" set statusline+=%*


" let g:syntastic_always_populate_loc_list = 1
" let g:syntastic_auto_loc_list = 1
" let g:syntastic_check_on_open = 1
" let g:syntastic_check_on_wq = 0



" ctrlp
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_working_path_mode = 'ra'

let g:ctrlp_custom_ignore = {
    \ 'dir':  '\v[\/]\.(git|hg|svn)$',
    \ 'file': '\v\.(exe|so|dll)$',
    \ 'link': 'SOME_BAD_SYMBOLIC_LINKS',
    \ }


" Markdown plugin shortcut
let vim_markdown_preview_hotkey='<C-m>'
let vim_markdown_preview_temp_file=1
let vim_markdown_preview_toggle=2
let vim_markdown_preview_github=0
let vim_markdown_preview_pandoc=0
let vim_markdown_preview_perl=1

" Write all buffers before navigating from Vim to tmux pane
let g:tmux_navigator_save_on_switch = 2

" let g:tmux_navigator_no_mappings = 1
" nnoremap <silent> <S-C-H> :TmuxNavigateLeft<cr>
" nnoremap <silent> <S-C-J> :TmuxNavigateDown<cr>
" nnoremap <silent> <S-C-K> :TmuxNavigateUp<cr>
" nnoremap <silent> <S-C-L> :TmuxNavigateRight<cr>
" nnoremap <silent> <C-\> :TmuxNavigatePrevious<cr>

" default mappings

" set clipboard+=unnamedplus
set modelines=0
set go+=a
" copy and paste
vmap <C-c> "+yi
vmap <C-x> "+c


" nnoremap / /\v
" vnoremap / /\v

set shiftwidth=4 softtabstop=4
set incsearch ignorecase hlsearch smartcase showmatch gdefault
" Press space to clear search highlighting and any message already displayed.
nnoremap <silent> <Space> :silent noh<Bar>echo<CR>


set showcmd
set cmdheight=2

" I like 4 stops
set tabstop=4

" Spaces instead of tabs
set expandtab

" Always  set auto indenting on
set autoindent

set visualbell
set hidden

" Display all the options when autocompleting
set wildignore+=*/tmp/*,*.so,*.swp,*.zip     " Linux/MacOSX
set wildmenu
set wildmode=list:longest
set wildchar=<Tab>
set wildcharm=<C-Z>
nnoremap <F10> :b <C-Z>

" set cursorline
set ttyfast
set wrap
set nolist
set guifont=lucida_console:h8
set lsp=0
set mousehide
set noequalalways
set number
set bs=2
set scrolloff=8
set splitright
set shiftround
set showbreak=----
set smartindent
set smarttab
set history=99
set linebreak
set mousemodel=popup
set showmode
"set patchmode=.orig
:map <Up> gk
:map <Down> gj
"set virtualedit=all
set tags=.\tags,.\*\tags
"set tags=.\**\tags  "recursively slow...
"set tags=.\tags,\\hankh1\perl\tags
set winminwidth=0

set ww=[,]


" Turn syntax highlighting on
syntax on
filetype plugin indent on

" Set to auto read when a file is changed from the outside
set autoread



"func Backspace()
"  if col('.') == 1
"    if line('.')  != 1
"      return  "\<ESC>kA\<Del>"
"    else
"      return ""
"    endif
"  else
"    return "\<Left>\<Del>"
"  endif
"endfunc
"
"inoremap <BS> <c-r>=Backspace()<CR>

set ruler
set backspace=indent,eol,start

syntax enable "Enable syntax hl

if has("gui_running")
  set guioptions-=T
  set t_Co=256
endif

set background=dark

set encoding=utf-8
try
    lang en_US
catch
endtry

" set ffs=unix,dos,mac "Default file types
autocmd BufWritePre *.py,*.cpp,*.go,*rc,*.sql,*.cpp,*.txt,*.sh,*.yaml,*.md  :retab | :%s/\s\+$//e

" If the current buffer has never been saved, it will have no name,
" call the file browser to save it, otherwise just save it.
command -nargs=0 -bar Update if &modified
                           \|    if empty(bufname('%'))
                           \|        browse confirm write
                           \|    else
                           \|        confirm write
                           \|    endif
                           \|endif

" " To save, ctrl-s.
" nmap <c-s> :w<CR>
" imap <c-s> <Esc>:w<CR>a

noremap <silent> <C-s>          :update<CR>
nnoremap <silent> <C-s>         :<C-u>Update<CR>
vnoremap <silent> <C-s>         <C-C>:update<CR>
inoremap <silent> <C-s>         <C-O>:update<CR>


" command! -range=% Isort :<line1>,<line2>! isort

set paste

set shell=/bin/sh
set switchbuf=usetab
nnoremap <F8> :bnext<CR>
nnoremap <S-F8> :bprevious<CR>
nnoremap [19;2~ :bprevious<CR>


set ssop-=options    " do not store global and local values in a session
set ssop-=folds      " do not store folds

colorscheme delek
" line number colors for light background
hi LineNr term=bold cterm=bold ctermfg=2 guifg=Grey guibg=Grey90
